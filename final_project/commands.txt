These are command for launch local or server applications such a mlflow, prefect, terraform, aws  

# 1.aws connection 
ssh -i ~/.ssh/awsl.pem ubuntu@{YOUR_PUBLIC_IP}

# 2.mlflow ui
mlflow ui --backend-store-uri sqlite:///mlflow.db
pip install --upgrade mlflow


# 3.prefect 
# Development
prefect project init

# Orchestration 
prefect cloud login
OR
prefect server start

# Execution 
prefect worker start -p my_pool -t process

# Deployment 
prefect deployment my-flow.py:main_flow [название @flow в вашем py файле] -n 'deployment_1' -p zoompool

# Run the deployment from the CLI
prefect deployment run 
                hello|my-deployment

prefect deploy -n deployment_1

# Blocks
prefect block ls
prefect block type ls
prefect block register -m prefect_aws

# 4.evidently 

# 5.terraform

# 6. docker
(sudo) dockerd
docker ps / docker ps -a / docker ps -s (список контейнеро с из размерами)
docker rm  -- удаление одного контейнера или всех через перечисление
docker container prune -- удаление всех остановленных контейнеров
docker rmi -- удаление образов (images)

6.1. Управление контейнерами:

docker ps: Просмотр списка активных (запущенных) контейнеров.
docker ps -a или docker container ls -a: Просмотр списка всех контейнеров, включая остановленные.
docker create <имя_образа>: Создание контейнера из образа (без запуска).
docker start <container_id или container_name>: Запуск остановленного контейнера.
docker stop <container_id или container_name>: Остановка запущенного контейнера.
docker restart <container_id или container_name>: Перезапуск контейнера.
docker rm <container_id или container_name>: Удаление контейнера.
docker container prune: Удаление всех остановленных контейнеров.

6.2. Управление образами:

docker images или docker image ls: Просмотр списка образов Docker.
docker rmi <image_id или image_name>: Удаление образа.
docker image prune: Удаление неиспользуемых образов.

6.3. Управление ресурсами:

docker stats <container_id или container_name>: Просмотр статистики использования ресурсов контейнера (CPU, память и т. д.).
docker system df: Просмотр использования дискового пространства Docker (образы, контейнеры и т. д.).

6.4. Работа с Dockerfile (файл, содержащий инструкции для создания образа):

docker build -t <image_name> <путь_к_Dockerfile>: Создание образа на основе Dockerfile.
docker build -t <image_name> .: Создание образа, если Dockerfile находится в текущей директории.

6.5. Работа с сетями:

docker network ls: Просмотр списка сетей Docker.
docker network create <network_name>: Создание новой пользовательской сети.

6.6. Дополнительные команды:

docker version: Просмотр информации о версии Docker.
docker info: Просмотр общей информации о Docker.
docker exec -it <container_id или container_name> <команда>: Выполнение команды внутри контейнера.
docker logs <container_id или container_name>: Просмотр журнала вывода контейнера.

# 7. conda env
conda create -n {name_your_env}
conda install --file requirements.txt
conda activate {name_your_env}
conda env list
conda env remove --name <название_окружения>
# узнать размер окружений
du -sh /path/to/anaconda/envs/<название_окружения> или  ls -lh /path/to/anaconda/envs/<название_окружения>

# 8. Работа с локальными портами
1.Проверить, используется ли порт 5000
netstat -tuln | grep 5000
или 
lsof -i :5000
2. Принудительно остановить процессы на портах
kill {number of gunicorn} 
если порты не закрываются после команды kill, можно их закрыть принудительно с помощью команды kill -9 {number of gunicorn}

# 9.
проверка целостности файлов системы с помощью инструмента
sfc /scannow


# 10. git
git remote -v